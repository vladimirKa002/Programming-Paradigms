#lang racket
(require redex)
(define (alternating-sum lst)
  (define (multiplier-helper lst mult)
    (cond
      [(empty? lst) 0]
      [else (+ (* mult (first lst))
               (multiplier-helper (rest lst) (* mult -1)))]))
  (multiplier-helper lst 1))

(define (alternating-sum-tail lst)
  (define (multiplier-helper lst current mult)
    (define (helper lst current mult)
      (cond
        [(empty? lst) current]
        [else (helper (rest lst)
                      (+ current (first lst)))]))
    (cond
      [(empty? lst) current]
      [else (multiplier-helper (rest lst) (+ (* mult (first lst)) current) (* mult -1))]))
  (multiplier-helper lst 0 1))

; Note: There is a helper definition in alternating-sum, however it is used only for
; multiplier, it is not related to tail implementation.

; b) For case (alternating-sum (list 6 2 4 1 3 9)) we will have:
; (multiplier-helper (list 1 2 3 4 5)) ->
; (+ (* 1 1)(multiplier-helper (list 2 3 4 5)(* 1 -1))) ->
; (+ (* 1 1)(+ (* (* 1 -1) 2)(multiplier-helper (list 3 4 5))(*(*1 -1) -1)))) ->
; ... -> 
; (+ (* 1 1)(+ (* (* 1 -1) 2)(+ (* (* (* 1 -1) -1) 3)(+ (* (* (* (* 1 -1) -1) -1) 4)
; (+ (* (* (* (* (* 1 -1) -1) -1) -1) -1) 5) 0)))))
; We can see that upon reaching the last step of recursion there will be collected a large
; amount of unperformed calculations. It will result in waiting for recursion comletion
; in a stack memory and it will cause additional latency.
;
; c) In tail recursion we will efficiently reuse stack frames because it will not be
; growing with unevaluated expressions. Tail recursion will finish execution of a function
; stack after reaching its end.