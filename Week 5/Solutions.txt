import CodeWorld


-- Ex 1

myReverse :: [Int] -> [Int]
myReverse [] = []
myReverse (n : nums) = myReverse nums ++ [n]

binaryToDecimal' :: [Int] -> Int
binaryToDecimal' [] = 0
binaryToDecimal' (n:bits) =
  n + 2 * binaryToDecimal' bits

binaryToDecimal :: [Int] -> Int
binaryToDecimal bits = binaryToDecimal' (myReverse bits)

skipLeadingZeros :: [Int] -> [Int]
skipLeadingZeros [] = []
skipLeadingZeros (0:bits) = skipLeadingZeros bits
skipLeadingZeros (1:bits) = [1] ++ bits

countZeros' :: [Int] -> Int
countZeros' [] = 0
countZeros' (n:bits) =
  (1 - n) + countZeros' bits

countZeros :: [Int] -> Int
countZeros bits = countZeros' (skipLeadingZeros bits)

encodeWithLengths'' :: Int -> Int -> [Int] -> [Int]
encodeWithLengths'' n k [] = [k]
encodeWithLengths'' n k (x:bits) 
  | n == x    = encodeWithLengths'' n (k + 1) bits
  | otherwise = [k] ++ encodeWithLengths'' x 1 bits

encodeWithLengths' :: [Int] -> [Int]
encodeWithLengths' [] = []
encodeWithLengths' (x:bits) = encodeWithLengths'' x 1 bits

encodeWithLengths :: [Int] -> [Int]
encodeWithLengths [] = []
encodeWithLengths bits = encodeWithLengths' (skipLeadingZeros bits)

binaryOdd :: [Int] -> Bool
binaryOdd [x] 
  | x == 0    = False
  | otherwise = True
binaryOdd (x:bits) = binaryOdd bits

skipLeadingZeros' :: [Int] -> [Int]
skipLeadingZeros' [] = [0]
skipLeadingZeros' (0:bits) = skipLeadingZeros' bits
skipLeadingZeros' (1:bits) = [1] ++ bits

decrement' :: [Int] -> [Int]
decrement' [0] = [0]
decrement' (1:bits) = (myReverse bits) ++ [0]
decrement' (0:bits) = (decrement' bits) ++ [1]

decrement :: [Int] -> [Int]
decrement bits = skipLeadingZeros' (decrement' (myReverse bits))
  
propagate :: (Bool, [Int]) -> [(Bool, Int)]
propagate (b, []) = []
propagate (b, (x:xs)) = [(b, x)] ++ propagate (b, xs)


-- Ex 2

alternatingSum' :: Int -> [Int] -> Int
alternatingSum' n [] = 0
alternatingSum' n (x:xs) = (x * n) + (alternatingSum' (n * (-1)) xs)

alternatingSum :: [Int] -> Int
alternatingSum nums = alternatingSum' 1 nums

{-

alternatingSum [1,2,3,4,5]
 = alternatingSum' 1 nums
     where nums = [1,2,3,4,5]
     
 = alternatingSum' 1 [1,2,3,4,5]
 = alternatingSum' n (x:xs)
     where n=1, x=1, xs=[2,3,4,5]
 = alternatingSum' 1 (1:[2,3,4,5])
 = 1 * 1 + (alternatingSum' (1 * (-1)) [2,3,4,5])
 
 = 1 * 1 + (alternatingSum' -1 [2,3,4,5])
 = 1 * 1 + (alternatingSum' -1 (2:[3,4,5]))
 = 1 * 1 + 2 * (-1) +
   (alternatingSum' ((-1) * (-1)) [3,4,5])
   
 = 1 * 1 + 2 * (-1) + (alternatingSum' 1 [3,4,5])
 = 1 * 1 + 2 * (-1) + (alternatingSum' 1 (3:[4,5]))
 = 1 * 1 + 2 * (-1) + 3 * 1 +
   (alternatingSum' (1 * (-1)) [4,5])
   
 = 1 * 1 + 2 * (-1) + 3 * 1 + (alternatingSum' -1 [4,5])
 = 1 * 1 + 2 * (-1) + 3 * 1 + (alternatingSum' -1 (4:[5]))
 = 1 * 1 + 2 * (-1) + 3 * 1 + 4 * (-1)
   (alternatingSum' ((-1) * (-1)) [5])
   
 = 1 * 1 + 2 * (-1) + 3 * 1 + 4 * (-1) + (alternatingSum' 1 [5])
 = 1 * 1 + 2 * (-1) + 3 * 1 + 4 * (-1) + (alternatingSum' 1 (5:[]))
 = 1 * 1 + 2 * (-1) + 3 * 1 + 4 * (-1) + 5 * 1 +
   (alternatingSum' (1 * (-1)) [])
   
 = 1 * 1 + 2 * (-1) + 3 * 1 + 4 * (-1) + 5 * 1 + (alternatingSum' -1 [])
 = 1 * 1 + 2 * (-1) + 3 * 1 + 4 * (-1) + 5 * 1 + 0
 = 3
 
-}

-- Ex 3

data Radians = Radians Double
data Degrees = Degrees Double

pi :: Double
pi = 3.14159

toDegrees :: Radians -> Degrees
toDegrees (Radians rd) = Degrees(rd * (180 / Main.pi))
fromDegrees :: Degrees -> Radians
fromDegrees (Degrees deg) = Radians(deg * (Main.pi / 180))

sampleDegree :: Degrees
sampleDegree = toDegrees (Radians 3.14)
sampleRadians :: Radians
sampleRadians = fromDegrees (Degrees 45)

printDegrees :: Degrees -> Double
printDegrees (Degrees degr) = degr

printRadians :: Radians -> Double
printRadians (Radians rd) = rd

main :: IO () 
main = do
  print(binaryToDecimal [1,0,1,1,0])
  print(countZeros [0,0,0,1,0,1,1,0])
  print(encodeWithLengths [0,0,0,1,1,0,1,1,1,0,0])
  print(binaryOdd [1,0,1,1,0])
  print(binaryOdd [1,0,1,1,1])
  print(decrement [1,0,1,1,0])
  print(decrement [1,0,0,0,0])
  print(decrement [0])
  print(propagate (False, [1, 2, 3]))
  print(propagate (True, [1, 1]))
  print(alternatingSum [6,2,4,1,3,9])
  print(alternatingSum [1,2,3,4,5])
  print(printDegrees sampleDegree)
  print(printRadians sampleRadians)
  
  
  
  
  