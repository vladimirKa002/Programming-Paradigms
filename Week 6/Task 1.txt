import CodeWorld

type Name = String
data Grade = A | B | C | D
data Student = Student Name Grade

data Result a
  = Success a
  | Failure String
  
dup f x = f x x
dip f x = f (f x x)
twice f x = f (f x)

-- Task 1

-- dup :: (a -> a -> b) -> a -> b
-- dip :: (a -> a -> a) -> a -> a -> a
-- twice :: (a -> a) -> a -> a

taskA = dip (+) 1 2
{- 
  dip :: (a1 -> a1 -> a1) -> a1 -> a1 -> a1
  (+) :: Int -> Int -> Int
  1   :: Int
  2   :: Int
  
  Now we need to match actual types with expected ones:
  From 1st arg:
    Int -> Int -> Int = a1 -> a1 -> a1
  From 2st & 3rd arg:
    Int = a1
  We can see that type of expression matches return value
  
  Therefore, we have: 
    dip (+) 1 2 :: Int
-}

taskB = dup (dip (+)) 1
{- 
  dup :: (a1 -> a1 -> b1) -> a1 -> b1
  dip :: (a2 -> a2 -> a2) -> a2 -> a2 -> a2 = (a2 -> a2 -> a2) -> a2 -> (a2 -> a2),
                                                    as functions in Haskell are curried
  (+) :: Int -> Int -> Int
  1   :: Int
  
  Now we need to match actual types with expected ones:
  From 1st arg:
    (1) a1 -> a1 -> b1 = (a2 -> a2 -> a2) -> a2 -> (a2 -> a2)
  From 1st arg of dip:
    (2) (a2 -> a2 -> a2) -> a2 -> a2 -> a2 = Int -> Int -> Int
  From 2rd arg:
    (3) a1 = Int
    
  From 2nd eq:
    Int = a2 -> a2 -> a2
    Int = a2
    Int = a2 -> a2
  From 1st eq:
    a1 = a2 -> a2 -> a2 = Int (correct, from (3))
    a1 = a2             = Int (correct, from (3))
    b1 = a2 -> a2       = Int
  
  So, we will have:
    b1 = Int => dup (dip (+)) 1 :: Int
-}

taskC = twice dip
{- 
  twice :: (a1 -> a1) -> a1 -> a1
  dip :: (a2 -> a2 -> a2) -> a2 -> (a2 -> a2)
  
  Now we need to match actual types with expected ones:
  From 1st arg:
    (1) a2 -> a2 -> a2 = a1 -> a1
  From 2st arg:
    (2) a2             = a1
  From 2st arg:
    (3) a2 -> a2       = a1
    
  So, we will have:
    twice dip :: (a2 -> a2 -> a2) -> a2 -> a2 -> a2
-}

-- taskD = dip dip -- :: Type Error
{- 
  dip :: (a1 -> a1 -> a1) -> a1 -> a1 -> a1
  dip :: (a2 -> a2 -> a2) -> a2 -> a2 -> a2
  
  Now we need to match actual types with expected ones:
  From 1st arg:
    (1) (a2 -> a2 -> a2) -> a2 -> (a2 -> a2) = a1 -> a1 -> a1
      - a2 -> a2 -> a2 = a1
      - a2             = a1
      - a2 -> a2       = a1
  
  Here we come to the problem of infinite type (not supported by Haskell):
    a2 = (a2 -> a2 -> a2) = (... -> ... -> ...)
-}

taskE = twice twice twice
{- 
  twice :: (a1 -> a1) -> a1 -> a1
  twice :: (a2 -> a2) -> a2 -> a2
  twice :: (a3 -> a3) -> a3 -> a3
  
  Now we need to match actual types with expected ones:
  From 1st arg:
    (1) (a2 -> a2) -> a2 -> a2 = a1 -> a1
      -- a2 -> a2 = a1
  From 2st arg:
    (2) (a3 -> a3) -> a3 -> a3 = a2 -> a2
      -- a3 -> a3 = a2
    
  So, we will have:
    (a3 -> a3) -> (a3 -> a3) = a1
    
  twice twice twice :: (a3 -> a3) -> a3 -> a3
-}

-- taskF = dup twice -- :: Type Error
{- 
  dup :: (a1 -> a1 -> b1) -> a1 -> b1
  twice :: (a2 -> a2) -> a2 -> a2
  
  Now we need to match actual types with expected ones:
  From 1st arg:
    (1) (a2 -> a2) -> a2 -> a2 = a1 -> a1 -> b1
      - a2 -> a2 = a1
      - a2       = a1
      - a2       = b1
  
  Here we come to the problem of infinite type (not supported by Haskell):
    a2 = a2 -> a2 = (... -> ...)
-}

main :: IO()
main = do
  print(taskA)
  print(taskB)




