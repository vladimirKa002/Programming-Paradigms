import CodeWorld

data Result a
  = Success a
  | Failure String

isSuccess :: Result a -> Bool
isSuccess (Success _) = True
isSuccess _           = False

extractSuccessValue :: Result a -> a
extractSuccessValue (Success a) = a

extractFailureValue :: Result a -> String
extractFailureValue (Failure a) = a

extractValue (Failure a) = a

-- a)
whileSuccess :: (a -> Result a) -> a -> a
whileSuccess f a
  | isSuccess (f a) == False = a
  | otherwise                = whileSuccess f (extractSuccessValue (f a))

f n | n > 100 = Failure "input is too large"
  | otherwise = Success (2 * n)
  
  
-- b)
applyResult :: Result (a -> b) -> Result a -> Result b
applyResult (Success func) (Success arg) = (Success (func arg))
applyResult (Failure left) _ = (Failure left)
applyResult _ (Failure right) = (Failure right)


-- c)
fromResult :: (a -> b) -> (String -> b) -> Result a -> b
fromResult f strF (Success a) = f a
fromResult f strF (Failure a) = strF a


-- d)
combineResultsWith :: (a -> b -> c) -> Result a -> Result b -> Result c
combineResultsWith f (Success a) (Success b) = Success (f a b)
combineResultsWith f (Failure a) _ = Failure a
combineResultsWith f _ (Failure a) = Failure a


main :: IO()
main = do
  print(whileSuccess f 1)
  print(extractSuccessValue (applyResult (Success length) (Success [1, 2, 3])))
  print(extractFailureValue (applyResult (Failure "no function") (Failure "no arg")))
  print(fromResult (+1) length (Success 3))
  print(fromResult (+1) length (Failure "not a number"))
  print(extractSuccessValue (combineResultsWith (+) (Success 2) (Success 3)))
  print(extractFailureValue (combineResultsWith (+) (Failure "x is undefined") (Failure "crash")))




